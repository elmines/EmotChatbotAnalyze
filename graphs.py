import sys
import collections
import argparse

import matplotlib
import matplotlib.pyplot as plt
import pandas as pd


_LEFT_QUOTE = "\u201C"
_RIGHT_QUOTE = "\u201D"

def create_parser():
	parser = argparse.ArgumentParser(description="Take responses generated by a chatbot and produce graphs showing statistics on them."
							"Either specify --input and --col or pass responses to standard input.")
	parser.add_argument("--input", "-i", metavar="responses.xlsx", help="Spreadsheet containing the responses as one of the columns.")
	parser.add_argument("--col", "-c", metavar="column_name", help="Column name from which to obtain responses")

	parser.add_argument("--max", metavar="N", type=int, default=10, help="Maximum number of categories to have a in a pie graph")
	parser.add_argument("--percent", metavar="X.XX", type=float, default=1.00, help="Preferred minimum % of pie graph to cover with real categories, not just \"Other\"")

	parser.add_argument("--styles", metavar="<path>.mplstyle", nargs="+", type=str, help="Matplotlib style sheets to customize graph")
	parser.add_argument("--title", metavar="<Incredible Title>", type=str, help="Title to display")

	return parser

def pie_graph(responses, max_cat=10, min_percent=0.90, suptitle=None):
	counts = collections.Counter(responses)

	max_cat = min( max_cat, len(counts.keys()) )	

	top_responses = sorted(counts.keys(), key=counts.get, reverse=True)

	categories = []
	percentages = []
	total_percent = 0.00
	i = 0
	while (len(categories) < max_cat - 1) and (total_percent < min_percent):
		response = top_responses[i]
		percent = counts[response] / len(responses)

		categories.append(response)
		percentages.append(percent)
		total_percent += percent	

		i += 1

	if len(top_responses) == max_cat:
		categories.append(top_responses[-1])
		categories = ["{0}{1}{2}".format(_LEFT_QUOTE, category, _RIGHT_QUOTE) for category in categories]
	else:
		num_remaining = max_cat - len(top_responses)
		categories = ["{0}{1}{2}".format(_LEFT_QUOTE, category, _RIGHT_QUOTE) for category in categories]
		categories.append("<Others>".format(num_remaining))
	percentages.append(1.0 - total_percent)

	#labels = ["{1}\n{0:.2%}".format(percentage, category) for percentage, category in zip(percentages, categories)]
	fig, axes = plt.subplots()
	if suptitle is not None: fig.suptitle(suptitle)
	axes.pie(percentages, labels=categories)
	axes.set_aspect("equal")
	plt.show()


if __name__ == "__main__":
	parser = create_parser()
	args = parser.parse_args()

	if args.input is None:
		lines = []
		sys.stderr.write("Reading sequences from standard input. . .\n")
		line = sys.stdin.readline()
		while line:
			lines.append(line.strip())
			line = sys.stdin.readline()
	else:
		if args.col is None:
			sys.stderr.write("Must specify both --input and --col.\n")
			sys.exit(0)
		lines = pd.read_excel(args.input)[args.col]

	if args.styles is not None:
		plt.style.use(args.styles)

	pie_graph(lines, max_cat=args.max, min_percent=args.percent, suptitle=args.title)
